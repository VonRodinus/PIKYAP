/*
Цель: Изучить обработку ошибок в Rust.
В этой лабораторной работе должна быть реализована программа, которая считывает целые числа из текстового файла, вычисляет их сумму, среднее значение, и
выводит результаты в консоль. При этом нужно правильно обрабатывать возможные ошибки, такие как отсутствие файла, ошибки при чтении, или
некорректные данные в файле.

Задачи:
Программа должна запрашивать у пользователя путь к файлу, содержащему список чисел (по одному числу на строку).
Прочитать файл и обработать возможные ошибки (например, если файл не найден).
Попробовать конвертировать каждую строку в целое число, игнорируя строки, которые не удается преобразовать.
Вычислить сумму и среднее значение всех корректных чисел.
Правильно обработать возможные ситуации, когда файл пуст или не содержит ни одного корректного числа.
*/


use std::fs::File;
use std::io::{self, BufRead};

fn main() {
    // Запрашиваем путь к файлу у пользователя
    println!("Введите путь к файлу: ");
    let mut file_path = String::new();
    io::stdin().read_line(&mut file_path).expect("Ошибка ввода");
    let file_path = file_path.trim();

    // Попытка открыть файл
    let file = File::open(&file_path);
    let file = match file {
        Ok(f) => f,
        Err(e) => {
            println!("Ошибка при открытии файла: {}", e);
            return;
        }
    };

    // Чтение файла построчно
    let reader = io::BufReader::new(file);
    let mut sum = 0;
    let mut count = 0;

    for line in reader.lines() {
        match line {
            Ok(line_content) => {
                // Пробуем конвертировать строку в число
                match line_content.trim().parse::<i32>() {
                    Ok(num) => {
                        sum += num;
                        count += 1;
                    }
                    Err(_) => {
                        println!("Пропуск некорректной строки: \"{}\"", line_content);
                    }
                }
            }
            Err(e) => {
                println!("Ошибка при чтении строки: {}", e);
                return;
            }
        }
    }

    // Выводим результаты или сообщение о пустом файле
    if count > 0 {
        let average = sum as f64 / count as f64;
        println!("Сумма чисел: {}", sum);
        println!("Среднее значение: {:.2}", average);
    } else {
        println!("В файле нет корректных чисел.");
    }
}
